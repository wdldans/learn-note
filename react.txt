
react.development.js: 核心库，引入后全局新增 React对象
react-dom.development: 扩展库（操作真实DOM），引入后新增ReactDOM
babel.min.js: 解析JSX语法代码转为JS代码的库
  ES6 ==> ES5
  JSX ==> JS
prop-typs.js: props类型检查

JSX: 
  本质上是Object类型的对象（一般对象）
  虚拟DOM比较"轻"，真实DOM比较"重"，虚拟DOM仅供react使用

JSX语法规则：
  1. 定义虚拟DOM时，不要写引号
  2. 标签中混入JS表达式时要用{}
  3. 样式的类名指定不要用class，要用className
  4. 内联样式，要用style={{ key: value }}的形式
  5. 虚拟DOM必须只有一个跟标签
  6. 标签必须闭合
  7. 标签首字母
      * 若小写字母开头，则将该标签转为html同名元素，若html中无该标签对应的同名元素，则报错
      * 若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错

XML: 
  早期用户存储和传输数据

【js表达式】与【js语句（代码）】区别：
  1. js表达式: 一个表达式会产生一个值，可以放在任何一个需要值的地方
    下面这些都是表达式：（考虑：let v = 以下成不成立）
      * a
      * a+b
      * demo(1)
      * arr.map()
      * function demo() {}
      * console.log(1)
  2. js语句（代码）
    下面这些都是语句（代码）：
      * if(){}
      * for(){}
      * switch(){case: xxx}


执行了ReactDOM.render(<MyComponent/>.......之后，发生了什么？
    函数式组件：
        1.React解析组件标签，找到了MyComponent组件。
        2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。
        
    类式组件：
        1.React解析组件标签，找到了MyComponent组件。
        2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。
        3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。

class类总结：
  1. 类中的constructor（构造器）不是必须写的，要对实例进行一些初始化的操作，如添加执行属性时才写。
  2. 如果A类继承B类，且A类中写了构造器，那么A类构造器中的super是必须要调用的，否则报错。
  3. 类中所定义的方法，都是放在了类的原型对象上，供类的实例使用。
  4.constructor，一般方法中this指向类的实例对象。

组件实例对象三大属性：
  1. state
    * 组件自身的
  2. props
    * 构造器是否接收props，是否传递给super，取决于是否希望在构造器中通过this访问props
    * 不能直接修改props
    * 由外往内传
  3. refs
    * 字符串形式的：ref="input1"（即将废弃）
    * 回调形式的：ref={currentNode => {this.input1 = currentNode}}
    * React.createRef：调用后可以返回一个容器，该容器可以存储被ref所标识的节点，该容器是“专人专用”的

事件处理：
  1.通过onXxx属性指定事件处理函数(注意大小写)
    * React使用的是自定义(合成)事件, 而不是使用的原生DOM事件 --- 为了更好的兼容性
    * React中的事件是通过事件委托方式处理的(委托给组件最外层的元素) --- 为了高效
  2.通过event.target得到发生事件的DOM元素对象 --- 勿过度使用refs


包含表单的组件分类：
  1. 受控组件：输入类dom随着用户输入，将数据维护到state状态中，等需要用时再取出（vue的双向绑定）--- 推荐
  2. 非受控组件：现用现取

高阶函数：
  如果一个函数符合下面2个规范的任何一个，那该函数就是高阶函数
    1. 若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数
    2. 若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数
    常见的高阶函数：Promise，setTimeout，arr.map()等

函数的柯里化：
  通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。
  function sum(a) {
    return (b) => {
      return (c) => {
        return a+b+c
      }
    }
  }
  const res = sum(a)(b)(c)

生命周期（旧）：
  1. 初始化阶段：由ReactDOM.render()
      1. constructor
      2. componentWillMount() ===> 18.x过时（UNSAFE_componentWillMount）
      3. render() ===> 必须使用
      4. componentDidMount() ===> 常用
          一般在这个钩子中做一些初始化的事情，例如：开启定时器，发送网络请求，订阅消息
  2. 更新阶段：由组件内部this.setState()或父组件render触发
      1. componentWillReceiveProps() --- 父组件render才有 ===> 18.x过时（UNSAFE_componentWillReceiveProps）
      2. shouldComponentUpdate() --- setState()
      3. componentWillUpdate() --- forceUpdate() ===> 18.x过时（UNSAFE_componentWillUpdate）
      4. render()
      5. componentDidUpdate()
  3. 卸载组件：由ReactDOM.unmountComponentAtNode()触发
      1. componentWillUnmount() ===> 常用

生命周期（新）：
  1. 初始化阶段：由ReactDOM.render()触发---初次渲染
      1. constructor
      2. getDerivedStateFromProps(props, state)
          state值在任何时候完全取决于props时可以使用
      3. render ===> 必须使用
      4. componentDidMount ===> 常用
  2. 更新阶段：由组件内部this.setSate()或父组件重新render触发
      1. getDerivedStateFromProps(props, state)
          state值在任何时候完全取决于props时可以使用
      2. shouldComponentUpdate
      3. render ===> 必须使用
      4. getSnapshotBeforeUpdate(prevProps, prevState)
          更新之前的快照
      5. componentDidUpdate(prevProps, prevState, snapshot)
  3. 卸载组件：由ReactDOM.unmountComponentAtNode()触发
      1. componentWillUnmount ===> 常用

总结：
  重要的钩子：
    1. render: 初始化渲染或更新渲染调用
    2. componentDidMount: 开启监听，发送ajax请求
    3. componentWillUnmount: 做一些收尾工作，如：清理定时器

  即将废弃的钩子（18.x废弃）
    1. componentWillMount
    2. componentWillReceiveProps
    3. componentWillUpdate

DOM的Diffing算法
  1. 虚拟DOM中key的作用：
    1. 简单的说：key是虚拟DOM随想的标识，在更新显示时key起着至关重要的作用。
    2. 详细的说：当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】，
                  随后react进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：
          a. 旧虚拟DOM中找到了与新虚拟DOM相同的key:
            1. 若虚拟DOM中内容没变，直接使用之前的真实DOM
            2. 若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM
          b. 旧虚拟DOM中未找到与新虚拟DOM相同的key
                根据数据创建新的真实DOM，随后渲染到页面
  2. 用index作为key可能会引发的问题：
    1. 若对数据进行：逆序添加、逆序删除灯破坏顺序的操作：
            会产生没有必要的真实DOM更新 ==> 界面没问题，但效率低
    2. 如果结构中还包含输入类DOM：
            会产生错误DOM更新 ==> 界面有问题
    3. 注意！如果不存在数据的逆序添加、逆序删除灯破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。
  3.开发中如何选择key?
    1. 最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号、学号等唯一值
    2. 如果确定只是简单的展示数据，用index也是可以的

React脚手架
使用脚手架开发的项目的特点: 模块化, 组件化, 工程化

react脚手架项目结构
  public ---- 静态资源文件夹
    favicon.icon ------ 网站页签图标
    index.html -------- 主页面
    manifest.json ----- 应用加壳的配置文件
    robots.txt -------- 爬虫协议文件
  src ---- 源码文件夹
    App.js --------- App组件
    App.test.js ---- 用于给App做测试
    index.js ------- 入口文件
    reportWebVitals.js
      --- 页面性能分析文件(需要web-vitals库的支持)
    setupTests.js
      ---- 组件单元测试的文件(需要jest-dom库的支持)

样式的模块化
  import hello from './index.module.css'
  className={hello.title}

功能界面的组件化编码流程（通用）
  1. 拆分组件: 拆分界面,抽取组件
  2. 实现静态组件: 使用组件实现静态页面效果
  3. 实现动态组件
    3.1 动态显示初始化数据
      3.1.1 数据类型
      3.1.2 数据名称
      3.1.2 保存在哪个组件?
    3.2 交互(从绑定事件监听开始)

React脚手架中，跨域解决办法：
  1. manifest.json文件加："proxy": "http://localhost:5000"（开发时后端服务器）
  2. src/setupProxy.json文件： 
      const proxy = require('http-proxy-middleware')
      module.exports = function(app) {
        app.use(
          proxy('/api1', {
            target: 'http://localhost:5000',
            changeOrigin: true,
            pathRewrite: {
              '^/api1': ''
            }
          }),
          proxy('/api2', {
            target: 'http://localhost:5001',
            changeOrigin: true,
            pathRewrite: {
              '^/api2': ''
            }
          })
        )
      }


React路由

路由的基本使用
  1. 明确好界面中的导航区，展示区
  2. 导航区的a标签改为Link标签
          <Link to="xxx">Demo</Link>
  3. 展示区写Route标签进行路径的匹配
          <Route path="xxx" component={Demo} />
  4. <App>的最外侧包裹了一个<BrowserRouter>或<HashRouter>


路由组件与一般组件
  1. 写法不同
      一般组件：<Demo />
      路由组件：<Route path="/demo" component={Demo} />
  2. 存放位置不同
      一般组件：components
      路由组件：pages
  3. 接收到的props不同
      一般组件：写组件标签时传递了什么，就能收到什么
      路由组件：接收到3个固定的属性
        history:
            go 
            goBack 
            goForward 
            push 
            replace 
        location:
            pathname 
            search 
            state 
        match:
            params 
            path
            url 
  
NavLink与封装NavLink
  1. NavLink可以实现路由链接的高亮，通过activeClassName指定样式名
  2. 标签体内容是一个特殊的标签属性
  3. 通过this.props.children可以获取标签体内容

Switch的使用
  1. 通常情况下，path和component是一一对应的关系
  2. Switch可以提高路由匹配的效率（单一匹配，匹配到后就不再往下匹配）

解决多级路径刷新页面样式丢失的问题
  1. public/index.html 中 引入样式时不写 ./  写 / （常用）
  2. public/index.html 中 引入样式时不写 ./  写 %PUBLIC_URL%/ （常用）
  3. 使用HashRouter（不常用）

路由的模糊匹配与精准匹配
  1. 默认使用的时模糊匹配（简单记：【输入的路径】必须包含【匹配的路径】，且顺序一致）
  2. 开启严格匹配：<Route exact={true} path="/about" component={About} />
  3. 严格匹配不要随便开启，需要再开，有时候开启回导致无法继续匹配二级路由

Redirect（重定向）使用
  1. 一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到Redirect指定的路由
  2. 具体编码：
      <Switch>
        <Route path="/about" component={About} />
        <Route path="/Home" component={Home} />
        <Redirect to="/about" />
      </Switch>
  
嵌套路由
  1. 注册子路由时要写上父路由的path值
  2. 路由的匹配是按照注册路由的顺序进行的

向路由组件传递参数
  1. params参数 -- 最常用
      路由链接（携带参数）：<Link to='/demo/test/tom/18'>详情</Link>
      注册路由（声明接收）：<Route path='/demo/test/:name/:age component={Test} />
      接收参数：const { name, age } = this.props.match.params
  2. search参数 -- 其次
      路由链接（携带参数）：<Link to='/demo/test?name=tom&age=18'>详情</Link>
      注册路由（无需声明，正常注册即可）：<Route path='/demo/test component={Test} />
      接收参数：const { name, age } = qs.parse(this.props.location.slice(1))
      备注：获取到的search是urlencoded编码字符串，需要借助querystring解析
  3. state参数 -- 最不常用
      路由链接（携带参数）：<Link to={{pathname: '/demo/test', state: {name:tom,age:18}}}>详情</Link>
      注册路由（无需声明，正常注册即可）：<Route path='/demo/test component={Test} />
      接收参数：const { name, age } = this.props.location.state
      备注：浏览器地址栏不展示参数，但是手动刷新也可以保留住参数（页面数据不丢失）


编程式路由导航
  借助this.props.history对象上的API对操作路由跳转，前进，后退
      -this.props.history.push()
      -this.props.history.replace()
      -this.props.history.goBack()
      -this.props.history.goForward()
      -this.props.history.go()

withRouter的使用
  * 使用：withRouter(Header): 加工Header组件
  * 加工一般组件，让一般组件具备路由组件所特有的API
  * 返回的是一个新的组件

BrowserRouter 与 HashRouter 区别
  1. 底层原理不一样：
      BrowserRouter使用的是H5的history API，不兼容IE9及以下版本
      HashRouter使用的是URL的哈希值
  2. path表现形式不一样
      BrowserRouter的路径中没有#，例如：localhost:3000/domo/test
      HashRouter的路径包含#，例如：localhost:3000/#/demo/test
  3. 刷新后对路由state参数的影响
      BrowserRouter没有任何影响，因为state保存在history对象中
      HashRouter刷新后会导致路由state参数的丢失！！！
  4. 备注：HashRouter可以解决一些路径错误相关问题（解决多级路径刷新页面样式丢失的问题）


Redux
1.求和案例redux精简版
  (1).去除Count组件自身的状态
  (2).src下建立:
          -redux
            -store.js
            -count_reducer.js

  (3).store.js：
        1).引入redux中的createStore函数，创建一个store
        2).createStore调用时要传入一个为其服务的reducer
        3).记得暴露store对象

  (4).count_reducer.js：
        1).reducer的本质是一个函数，接收：preState,action，返回加工后的状态
        2).reducer有两个作用：初始化状态，加工状态
        3).reducer被第一次调用时，是store自动触发的，
                传递的preState是undefined,
                传递的action是:{type:'@@REDUX/INIT_a.2.b.4}

  (5).在index.js中监测store中状态的改变，一旦发生改变重新渲染<App/>
      备注：redux只负责管理状态，至于状态的改变驱动着页面的展示，要靠我们自己写。


2.求和案例redux完整版
		新增文件：
			1.count_action.js 专门用于创建action对象
			2.constant.js 放置容易写错的type值


3.求和案例redux异步action版
		 (1).明确：延迟的动作不想交给组件自身，想交给action
		 (2).何时需要异步action：想要对状态进行操作，但是具体的数据靠异步任务返回。
		 (3).具体编码：
		 			1).yarn add redux-thunk，并配置在store中
		 			2).创建action的函数不再返回一般对象，而是一个函数，该函数中写异步任务。
		 			3).异步任务有结果后，分发一个同步的action去真正操作数据。
		 (4).备注：异步action不是必须要写的，完全可以自己等待异步任务的结果了再去分发同步action。  


4.求和案例react-redux基本使用
			(1).明确两个概念：
						1).UI组件:不能使用任何redux的api，只负责页面的呈现、交互等。
						2).容器组件：负责和redux通信，将结果交给UI组件。
			(2).如何创建一个容器组件————靠react-redux 的 connect函数
							connect(mapStateToProps,mapDispatchToProps)(UI组件)
								-mapStateToProps:映射状态，返回值是一个对象
								-mapDispatchToProps:映射操作状态的方法，返回值是一个对象
			(3).备注1：容器组件中的store是靠props传进去的，而不是在容器组件中直接引入
			(4).备注2：mapDispatchToProps，也可以是一个对象


5.求和案例react-redux优化
			(1).容器组件和UI组件整合一个文件
			(2).无需自己给容器组件传递store，给<App/>包裹一个<Provider store={store}>即可。
			(3).使用了react-redux后也不用再自己检测redux中状态的改变了，容器组件可以自动完成这个工作。
			(4).mapDispatchToProps也可以简单的写成一个对象
			(5).一个组件要和redux“打交道”要经过哪几步？
							(1).定义好UI组件---不暴露
							(2).引入connect生成一个容器组件，并暴露，写法如下：
									connect(
										state => ({key:value}), //映射状态
										{key:xxxxxAction} //映射操作状态的方法
									)(UI组件)
							(4).在UI组件中通过this.props.xxxxxxx读取和操作状态


6.求和案例react-redux数据共享版
			(1).定义一个Pserson组件，和Count组件通过redux共享数据。
			(2).为Person组件编写：reducer、action，配置constant常量。
			(3).重点：Person的reducer和Count的Reducer要使用combineReducers进行合并，
					合并后的总状态是一个对象！！！
			(4).交给store的是总reducer，最后注意在组件中取出状态的时候，记得“取到位”。

7.求和案例react-redux开发者工具的使用
			(1).yarn add redux-devtools-extension
			(2).store中进行配置
					import {composeWithDevTools} from 'redux-devtools-extension'
					const store = createStore(allReducer,composeWithDevTools(applyMiddleware(thunk)))

8.求和案例react-redux最终版
			(1).所有变量名字要规范，尽量触发对象的简写形式。
			(2).reducers文件夹中，编写index.js专门用于汇总并暴露所有的reducer